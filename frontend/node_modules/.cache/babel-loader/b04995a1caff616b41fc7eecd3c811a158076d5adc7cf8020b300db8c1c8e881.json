{"ast":null,"code":"var _jsxFileName = \"/Users/raihanchowdhury/Desktop/ai_platform/P2/frontend/src/pages/ProjectManagerAddTaskPage.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// frontend/src/pages/ProjectManagerAddTaskPage.js\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport API from '../services/api';\nimport '../styles/ProjectManagerTask.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProjectManagerAddTaskPage() {\n  _s();\n  const {\n    projectId\n  } = useParams();\n  const navigate = useNavigate();\n\n  // Basic Task form\n  const [assignedTo, setAssignedTo] = useState('');\n  const [deadline, setDeadline] = useState('');\n  const [instructions, setInstructions] = useState('');\n\n  // Annotators\n  const [annotators, setAnnotators] = useState([]);\n\n  // The collapsible tree data\n  const [treeData, setTreeData] = useState([]);\n  const [selectedPaths, setSelectedPaths] = useState(new Set());\n\n  // NEW: All assigned paths for this project\n  const [alreadyAssignedPaths, setAlreadyAssignedPaths] = useState(new Set());\n  useEffect(() => {\n    fetchAnnotators();\n    fetchProjectTree();\n    fetchAssignedItems();\n    // eslint-disable-next-line\n  }, [projectId]);\n  async function fetchAnnotators() {\n    try {\n      // e.g. /auth/users?role_id=4\n      const res = await API.get('/auth/users?role_id=4');\n      setAnnotators(res.data.users || []);\n    } catch (err) {\n      console.error('[AddTaskPage] fetchAnnotators error:', err);\n    }\n  }\n\n  // Tree data, skipping \"Tasks\" automatically from the backend\n  async function fetchProjectTree() {\n    try {\n      const res = await API.get(`/auth/projects/${projectId}/files-tree`);\n      setTreeData(res.data.tree || []);\n    } catch (err) {\n      console.error('[AddTaskPage] fetchProjectTree error:', err);\n    }\n  }\n\n  // 2) Fetch all assigned items so we can highlight them\n  async function fetchAssignedItems() {\n    try {\n      const res = await API.get(`/auth/projects/${projectId}/assigned-items`);\n      const assigned = res.data.assignedPaths || [];\n      setAlreadyAssignedPaths(new Set(assigned));\n    } catch (err) {\n      console.error('[AddTaskPage] fetchAssignedItems error:', err);\n    }\n  }\n\n  // Create the new task\n  async function handleCreateTask() {\n    try {\n      const body = {\n        assigned_to: assignedTo || null,\n        deadline: deadline || null,\n        instructions: instructions || null\n      };\n      const res = await API.post(`/auth/projects/${projectId}/tasks`, body);\n      const newTaskId = res.data.taskId;\n\n      // If we selected some files, copy them\n      if (selectedPaths.size > 0) {\n        await API.post(`/auth/projects/${projectId}/tasks/${newTaskId}/files`, {\n          selectedPaths: Array.from(selectedPaths)\n        });\n      }\n      navigate(`/pm/projects/${projectId}`);\n    } catch (err) {\n      console.error('[AddTaskPage] handleCreateTask error:', err);\n      alert('Failed to create task. Check console for details.');\n    }\n  }\n  function handleCancel() {\n    navigate(`/pm/projects/${projectId}`);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pm-add-task-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Create New Task for Project #\", projectId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-form-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Assign to Annotator:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: assignedTo,\n        onChange: e => setAssignedTo(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Unassigned--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), annotators.map(a => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: a.id,\n          children: a.email\n        }, a.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Deadline:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: deadline,\n        onChange: e => setDeadline(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Instructions:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: instructions,\n        onChange: e => setInstructions(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-files-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Select Folders/Files for this Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), treeData.length > 0 ? /*#__PURE__*/_jsxDEV(CollapsibleTreeWithCheckbox, {\n        treeData: treeData,\n        selectedPaths: selectedPaths,\n        setSelectedPaths: setSelectedPaths,\n        alreadyAssignedPaths: alreadyAssignedPaths\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No files found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCreateTask,\n        children: \"Create Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n}\n\n/** Collapsible tree of checkboxes, with highlight for already-assigned items */\n_s(ProjectManagerAddTaskPage, \"pwHP6PkIqUhzmY5+2iKjzcuFQms=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ProjectManagerAddTaskPage;\nfunction CollapsibleTreeWithCheckbox({\n  treeData,\n  selectedPaths,\n  setSelectedPaths,\n  alreadyAssignedPaths\n}) {\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"file-tree\",\n    children: treeData.map((node, idx) => /*#__PURE__*/_jsxDEV(TreeCheckboxNode, {\n      node: node,\n      selectedPaths: selectedPaths,\n      setSelectedPaths: setSelectedPaths,\n      alreadyAssignedPaths: alreadyAssignedPaths\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 9\n  }, this);\n}\n_c2 = CollapsibleTreeWithCheckbox;\nfunction TreeCheckboxNode({\n  node,\n  selectedPaths,\n  setSelectedPaths,\n  alreadyAssignedPaths\n}) {\n  _s2();\n  const [isOpen, setIsOpen] = useState(false);\n  const isChecked = selectedPaths.has(node.path);\n  const isUsed = alreadyAssignedPaths.has(node.path); // highlight if assigned\n\n  const toggleOpen = () => setIsOpen(!isOpen);\n  const onCheckboxChange = checked => {\n    const newSet = new Set(selectedPaths);\n    if (checked) {\n      newSet.add(node.path);\n    } else {\n      newSet.delete(node.path);\n    }\n    setSelectedPaths(newSet);\n  };\n\n  // We add style to show an \"assigned\" folder in a different color\n  const assignedStyle = {\n    color: 'red',\n    fontWeight: 'bold'\n  }; // or your choice\n\n  if (node.type === 'directory') {\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"tree-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"folder-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"folder-arrow\",\n          onClick: toggleOpen,\n          role: \"button\",\n          tabIndex: 0,\n          onKeyDown: e => e.key === 'Enter' && toggleOpen(),\n          children: isOpen ? '⌄' : '>'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: isChecked,\n          onChange: e => {\n            e.stopPropagation();\n            onCheckboxChange(e.target.checked);\n          },\n          onClick: e => e.stopPropagation()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"folder-icon\",\n          style: isUsed ? assignedStyle : {},\n          children: [\"\\uD83D\\uDCC1 \", node.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this), isOpen && node.children && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"folder-children\",\n        children: node.children.map((child, i) => /*#__PURE__*/_jsxDEV(TreeCheckboxNode, {\n          node: child,\n          selectedPaths: selectedPaths,\n          setSelectedPaths: setSelectedPaths,\n          alreadyAssignedPaths: alreadyAssignedPaths\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this);\n  }\n\n  // It's a file\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"tree-item\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: isChecked,\n        onChange: e => onCheckboxChange(e.target.checked)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"file-icon\",\n        style: isUsed ? assignedStyle : {},\n        children: [\"\\uD83D\\uDCC4 \", node.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 9\n  }, this);\n}\n_s2(TreeCheckboxNode, \"+sus0Lb0ewKHdwiUhiTAJFoFyQ0=\");\n_c3 = TreeCheckboxNode;\nexport default ProjectManagerAddTaskPage;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ProjectManagerAddTaskPage\");\n$RefreshReg$(_c2, \"CollapsibleTreeWithCheckbox\");\n$RefreshReg$(_c3, \"TreeCheckboxNode\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","API","jsxDEV","_jsxDEV","ProjectManagerAddTaskPage","_s","projectId","navigate","assignedTo","setAssignedTo","deadline","setDeadline","instructions","setInstructions","annotators","setAnnotators","treeData","setTreeData","selectedPaths","setSelectedPaths","Set","alreadyAssignedPaths","setAlreadyAssignedPaths","fetchAnnotators","fetchProjectTree","fetchAssignedItems","res","get","data","users","err","console","error","tree","assigned","assignedPaths","handleCreateTask","body","assigned_to","post","newTaskId","taskId","size","Array","from","alert","handleCancel","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","map","a","id","email","type","length","CollapsibleTreeWithCheckbox","onClick","_c","node","idx","TreeCheckboxNode","_c2","_s2","isOpen","setIsOpen","isChecked","has","path","isUsed","toggleOpen","onCheckboxChange","checked","newSet","add","delete","assignedStyle","color","fontWeight","role","tabIndex","onKeyDown","key","stopPropagation","style","name","child","i","_c3","$RefreshReg$"],"sources":["/Users/raihanchowdhury/Desktop/ai_platform/P2/frontend/src/pages/ProjectManagerAddTaskPage.js"],"sourcesContent":["// frontend/src/pages/ProjectManagerAddTaskPage.js\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport API from '../services/api';\nimport '../styles/ProjectManagerTask.css';\n\nfunction ProjectManagerAddTaskPage() {\n    const { projectId } = useParams();\n    const navigate = useNavigate();\n\n    // Basic Task form\n    const [assignedTo, setAssignedTo] = useState('');\n    const [deadline, setDeadline] = useState('');\n    const [instructions, setInstructions] = useState('');\n\n    // Annotators\n    const [annotators, setAnnotators] = useState([]);\n\n    // The collapsible tree data\n    const [treeData, setTreeData] = useState([]);\n    const [selectedPaths, setSelectedPaths] = useState(new Set());\n\n    // NEW: All assigned paths for this project\n    const [alreadyAssignedPaths, setAlreadyAssignedPaths] = useState(new Set());\n\n    useEffect(() => {\n        fetchAnnotators();\n        fetchProjectTree();\n        fetchAssignedItems();\n        // eslint-disable-next-line\n    }, [projectId]);\n\n    async function fetchAnnotators() {\n        try {\n            // e.g. /auth/users?role_id=4\n            const res = await API.get('/auth/users?role_id=4');\n            setAnnotators(res.data.users || []);\n        } catch (err) {\n            console.error('[AddTaskPage] fetchAnnotators error:', err);\n        }\n    }\n\n    // Tree data, skipping \"Tasks\" automatically from the backend\n    async function fetchProjectTree() {\n        try {\n            const res = await API.get(`/auth/projects/${projectId}/files-tree`);\n            setTreeData(res.data.tree || []);\n        } catch (err) {\n            console.error('[AddTaskPage] fetchProjectTree error:', err);\n        }\n    }\n\n    // 2) Fetch all assigned items so we can highlight them\n    async function fetchAssignedItems() {\n        try {\n            const res = await API.get(`/auth/projects/${projectId}/assigned-items`);\n            const assigned = res.data.assignedPaths || [];\n            setAlreadyAssignedPaths(new Set(assigned));\n        } catch (err) {\n            console.error('[AddTaskPage] fetchAssignedItems error:', err);\n        }\n    }\n\n    // Create the new task\n    async function handleCreateTask() {\n        try {\n            const body = {\n                assigned_to: assignedTo || null,\n                deadline: deadline || null,\n                instructions: instructions || null,\n            };\n            const res = await API.post(`/auth/projects/${projectId}/tasks`, body);\n            const newTaskId = res.data.taskId;\n\n            // If we selected some files, copy them\n            if (selectedPaths.size > 0) {\n                await API.post(`/auth/projects/${projectId}/tasks/${newTaskId}/files`, {\n                    selectedPaths: Array.from(selectedPaths),\n                });\n            }\n\n            navigate(`/pm/projects/${projectId}`);\n        } catch (err) {\n            console.error('[AddTaskPage] handleCreateTask error:', err);\n            alert('Failed to create task. Check console for details.');\n        }\n    }\n\n    function handleCancel() {\n        navigate(`/pm/projects/${projectId}`);\n    }\n\n    return (\n        <div className=\"pm-add-task-container\">\n            <h2>Create New Task for Project #{projectId}</h2>\n\n            <div className=\"task-form-section\">\n                <label>Assign to Annotator:</label>\n                <select value={assignedTo} onChange={(e) => setAssignedTo(e.target.value)}>\n                    <option value=\"\">--Unassigned--</option>\n                    {annotators.map((a) => (\n                        <option key={a.id} value={a.id}>\n                            {a.email}\n                        </option>\n                    ))}\n                </select>\n\n                <label>Deadline:</label>\n                <input type=\"date\" value={deadline} onChange={(e) => setDeadline(e.target.value)} />\n\n                <label>Instructions:</label>\n                <textarea value={instructions} onChange={(e) => setInstructions(e.target.value)} />\n            </div>\n\n            <div className=\"task-files-section\">\n                <h4>Select Folders/Files for this Task</h4>\n                {treeData.length > 0 ? (\n                    <CollapsibleTreeWithCheckbox\n                        treeData={treeData}\n                        selectedPaths={selectedPaths}\n                        setSelectedPaths={setSelectedPaths}\n                        alreadyAssignedPaths={alreadyAssignedPaths}\n                    />\n                ) : (\n                    <p>No files found.</p>\n                )}\n            </div>\n\n            <div className=\"task-buttons\">\n                <button onClick={handleCreateTask}>Create Task</button>\n                <button onClick={handleCancel}>Cancel</button>\n            </div>\n        </div>\n    );\n}\n\n/** Collapsible tree of checkboxes, with highlight for already-assigned items */\nfunction CollapsibleTreeWithCheckbox({\n    treeData,\n    selectedPaths,\n    setSelectedPaths,\n    alreadyAssignedPaths,\n}) {\n    return (\n        <ul className=\"file-tree\">\n            {treeData.map((node, idx) => (\n                <TreeCheckboxNode\n                    key={idx}\n                    node={node}\n                    selectedPaths={selectedPaths}\n                    setSelectedPaths={setSelectedPaths}\n                    alreadyAssignedPaths={alreadyAssignedPaths}\n                />\n            ))}\n        </ul>\n    );\n}\n\nfunction TreeCheckboxNode({\n    node,\n    selectedPaths,\n    setSelectedPaths,\n    alreadyAssignedPaths,\n}) {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const isChecked = selectedPaths.has(node.path);\n    const isUsed = alreadyAssignedPaths.has(node.path); // highlight if assigned\n\n    const toggleOpen = () => setIsOpen(!isOpen);\n\n    const onCheckboxChange = (checked) => {\n        const newSet = new Set(selectedPaths);\n        if (checked) {\n            newSet.add(node.path);\n        } else {\n            newSet.delete(node.path);\n        }\n        setSelectedPaths(newSet);\n    };\n\n    // We add style to show an \"assigned\" folder in a different color\n    const assignedStyle = { color: 'red', fontWeight: 'bold' }; // or your choice\n\n    if (node.type === 'directory') {\n        return (\n            <li className=\"tree-item\">\n                <div className=\"folder-header\">\n                    <span\n                        className=\"folder-arrow\"\n                        onClick={toggleOpen}\n                        role=\"button\"\n                        tabIndex={0}\n                        onKeyDown={(e) => e.key === 'Enter' && toggleOpen()}\n                    >\n                        {isOpen ? '⌄' : '>'}\n                    </span>\n                    <input\n                        type=\"checkbox\"\n                        checked={isChecked}\n                        onChange={(e) => {\n                            e.stopPropagation();\n                            onCheckboxChange(e.target.checked);\n                        }}\n                        onClick={(e) => e.stopPropagation()}\n                    />\n                    <span className=\"folder-icon\" style={isUsed ? assignedStyle : {}}>\n                        📁 {node.name}\n                    </span>\n                </div>\n                {isOpen && node.children && (\n                    <ul className=\"folder-children\">\n                        {node.children.map((child, i) => (\n                            <TreeCheckboxNode\n                                key={i}\n                                node={child}\n                                selectedPaths={selectedPaths}\n                                setSelectedPaths={setSelectedPaths}\n                                alreadyAssignedPaths={alreadyAssignedPaths}\n                            />\n                        ))}\n                    </ul>\n                )}\n            </li>\n        );\n    }\n\n    // It's a file\n    return (\n        <li className=\"tree-item\">\n            <div className=\"file-row\">\n                <input\n                    type=\"checkbox\"\n                    checked={isChecked}\n                    onChange={(e) => onCheckboxChange(e.target.checked)}\n                />\n                <span className=\"file-icon\" style={isUsed ? assignedStyle : {}}>\n                    📄 {node.name}\n                </span>\n            </div>\n        </li>\n    );\n}\n\nexport default ProjectManagerAddTaskPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}