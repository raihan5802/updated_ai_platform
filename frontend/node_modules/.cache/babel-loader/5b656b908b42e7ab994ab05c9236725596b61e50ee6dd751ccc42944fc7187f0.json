{"ast":null,"code":"var _jsxFileName = \"/Users/raihanchowdhury/Desktop/ai_platform/P2/frontend/src/pages/ProjectManagerAddTaskPage.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// frontend/src/pages/ProjectManagerAddTaskPage.js\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport API from '../services/api';\nimport '../styles/ProjectManagerTask.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProjectManagerAddTaskPage() {\n  _s();\n  const {\n    projectId\n  } = useParams();\n  const navigate = useNavigate();\n\n  // Basic Task form\n  const [assignedTo, setAssignedTo] = useState(''); // empty => unassigned\n  const [deadline, setDeadline] = useState('');\n  const [instructions, setInstructions] = useState('');\n\n  // Annotators\n  const [annotators, setAnnotators] = useState([]);\n\n  // The collapsible tree data\n  const [treeData, setTreeData] = useState([]);\n  const [selectedPaths, setSelectedPaths] = useState(new Set());\n  useEffect(() => {\n    fetchAnnotators();\n    fetchProjectTree();\n    // eslint-disable-next-line\n  }, [projectId]);\n\n  /**\n   * Query the backend for users with role_id=4\n   */\n  async function fetchAnnotators() {\n    try {\n      // e.g. GET /auth/users?role_id=4\n      const res = await API.get('/auth/users?role_id=4');\n      setAnnotators(res.data.users || []);\n    } catch (err) {\n      console.error('[AddTaskPage] fetchAnnotators error:', err);\n    }\n  }\n  async function fetchProjectTree() {\n    try {\n      // GET /auth/projects/:projectId/files-tree\n      const res = await API.get(`/auth/projects/${projectId}/files-tree`);\n      setTreeData(res.data.tree || []);\n    } catch (err) {\n      console.error('[AddTaskPage] fetchProjectTree error:', err);\n    }\n  }\n  async function handleCreateTask() {\n    try {\n      // If assignedTo is '', we pass null to the backend\n      const body = {\n        assigned_to: assignedTo.trim() === '' ? null : assignedTo,\n        deadline: deadline || null,\n        instructions: instructions || null\n      };\n      const res = await API.post(`/auth/projects/${projectId}/tasks`, body);\n      const newTaskId = res.data.taskId;\n\n      // If we selected some files/folders, copy them\n      if (selectedPaths.size > 0) {\n        await API.post(`/auth/projects/${projectId}/tasks/${newTaskId}/files`, {\n          selectedPaths: Array.from(selectedPaths)\n        });\n      }\n\n      // Go back to Project details\n      navigate(`/pm/projects/${projectId}`);\n    } catch (err) {\n      console.error('[AddTaskPage] handleCreateTask error:', err);\n      alert('Failed to create task.');\n    }\n  }\n  function handleCancel() {\n    navigate(`/pm/projects/${projectId}`);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pm-add-task-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Create New Task for Project #\", projectId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-form-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Assign to Annotator:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: assignedTo,\n        onChange: e => setAssignedTo(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Unassigned--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), annotators.map(a => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: a.id,\n          children: a.email\n        }, a.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Deadline:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: deadline,\n        onChange: e => setDeadline(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Instructions:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: instructions,\n        onChange: e => setInstructions(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-files-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Select Folders/Files for this Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), treeData.length > 0 ? /*#__PURE__*/_jsxDEV(CollapsibleTreeWithCheckbox, {\n        treeData: treeData,\n        selectedPaths: selectedPaths,\n        setSelectedPaths: setSelectedPaths\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No files found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCreateTask,\n        children: \"Create Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n\n/** Collapsible tree with checkboxes */\n_s(ProjectManagerAddTaskPage, \"3ynkv53lzEjPMWpDjP5pkQYHHs4=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ProjectManagerAddTaskPage;\nfunction CollapsibleTreeWithCheckbox({\n  treeData,\n  selectedPaths,\n  setSelectedPaths\n}) {\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"file-tree\",\n    children: treeData.map((node, idx) => /*#__PURE__*/_jsxDEV(TreeCheckboxNode, {\n      node: node,\n      selectedPaths: selectedPaths,\n      setSelectedPaths: setSelectedPaths\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 9\n  }, this);\n}\n_c2 = CollapsibleTreeWithCheckbox;\nfunction TreeCheckboxNode({\n  node,\n  selectedPaths,\n  setSelectedPaths\n}) {\n  _s2();\n  const [isOpen, setIsOpen] = useState(false);\n  const isChecked = selectedPaths.has(node.path);\n  const toggleOpen = () => setIsOpen(!isOpen);\n  const onCheckboxChange = checked => {\n    const newSet = new Set(selectedPaths);\n    if (checked) {\n      newSet.add(node.path);\n    } else {\n      newSet.delete(node.path);\n    }\n    setSelectedPaths(newSet);\n  };\n  if (node.type === 'directory') {\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      className: \"tree-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"folder-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"folder-arrow\",\n          onClick: toggleOpen,\n          role: \"button\",\n          tabIndex: 0,\n          onKeyDown: e => e.key === 'Enter' && toggleOpen(),\n          children: isOpen ? '⌄' : '>'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: isChecked,\n          onChange: e => {\n            e.stopPropagation();\n            onCheckboxChange(e.target.checked);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"folder-icon\",\n          children: \"\\uD83D\\uDCC1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this), \" \", node.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this), isOpen && node.children && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"folder-children\",\n        children: node.children.map((child, i) => /*#__PURE__*/_jsxDEV(TreeCheckboxNode, {\n          node: child,\n          selectedPaths: selectedPaths,\n          setSelectedPaths: setSelectedPaths\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this);\n  }\n\n  // It's a file\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"tree-item\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: isChecked,\n        onChange: e => onCheckboxChange(e.target.checked)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"file-icon\",\n        children: \"\\uD83D\\uDCC4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }, this), \" \", node.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 9\n  }, this);\n}\n_s2(TreeCheckboxNode, \"+sus0Lb0ewKHdwiUhiTAJFoFyQ0=\");\n_c3 = TreeCheckboxNode;\nexport default ProjectManagerAddTaskPage;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ProjectManagerAddTaskPage\");\n$RefreshReg$(_c2, \"CollapsibleTreeWithCheckbox\");\n$RefreshReg$(_c3, \"TreeCheckboxNode\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","API","jsxDEV","_jsxDEV","ProjectManagerAddTaskPage","_s","projectId","navigate","assignedTo","setAssignedTo","deadline","setDeadline","instructions","setInstructions","annotators","setAnnotators","treeData","setTreeData","selectedPaths","setSelectedPaths","Set","fetchAnnotators","fetchProjectTree","res","get","data","users","err","console","error","tree","handleCreateTask","body","assigned_to","trim","post","newTaskId","taskId","size","Array","from","alert","handleCancel","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","map","a","id","email","type","length","CollapsibleTreeWithCheckbox","onClick","_c","node","idx","TreeCheckboxNode","_c2","_s2","isOpen","setIsOpen","isChecked","has","path","toggleOpen","onCheckboxChange","checked","newSet","add","delete","role","tabIndex","onKeyDown","key","stopPropagation","name","child","i","_c3","$RefreshReg$"],"sources":["/Users/raihanchowdhury/Desktop/ai_platform/P2/frontend/src/pages/ProjectManagerAddTaskPage.js"],"sourcesContent":["// frontend/src/pages/ProjectManagerAddTaskPage.js\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport API from '../services/api';\nimport '../styles/ProjectManagerTask.css';\n\nfunction ProjectManagerAddTaskPage() {\n    const { projectId } = useParams();\n    const navigate = useNavigate();\n\n    // Basic Task form\n    const [assignedTo, setAssignedTo] = useState(''); // empty => unassigned\n    const [deadline, setDeadline] = useState('');\n    const [instructions, setInstructions] = useState('');\n\n    // Annotators\n    const [annotators, setAnnotators] = useState([]);\n\n    // The collapsible tree data\n    const [treeData, setTreeData] = useState([]);\n    const [selectedPaths, setSelectedPaths] = useState(new Set());\n\n    useEffect(() => {\n        fetchAnnotators();\n        fetchProjectTree();\n        // eslint-disable-next-line\n    }, [projectId]);\n\n    /**\n     * Query the backend for users with role_id=4\n     */\n    async function fetchAnnotators() {\n        try {\n            // e.g. GET /auth/users?role_id=4\n            const res = await API.get('/auth/users?role_id=4');\n            setAnnotators(res.data.users || []);\n        } catch (err) {\n            console.error('[AddTaskPage] fetchAnnotators error:', err);\n        }\n    }\n\n    async function fetchProjectTree() {\n        try {\n            // GET /auth/projects/:projectId/files-tree\n            const res = await API.get(`/auth/projects/${projectId}/files-tree`);\n            setTreeData(res.data.tree || []);\n        } catch (err) {\n            console.error('[AddTaskPage] fetchProjectTree error:', err);\n        }\n    }\n\n    async function handleCreateTask() {\n        try {\n            // If assignedTo is '', we pass null to the backend\n            const body = {\n                assigned_to: assignedTo.trim() === '' ? null : assignedTo,\n                deadline: deadline || null,\n                instructions: instructions || null\n            };\n            const res = await API.post(`/auth/projects/${projectId}/tasks`, body);\n            const newTaskId = res.data.taskId;\n\n            // If we selected some files/folders, copy them\n            if (selectedPaths.size > 0) {\n                await API.post(`/auth/projects/${projectId}/tasks/${newTaskId}/files`, {\n                    selectedPaths: Array.from(selectedPaths)\n                });\n            }\n\n            // Go back to Project details\n            navigate(`/pm/projects/${projectId}`);\n        } catch (err) {\n            console.error('[AddTaskPage] handleCreateTask error:', err);\n            alert('Failed to create task.');\n        }\n    }\n\n    function handleCancel() {\n        navigate(`/pm/projects/${projectId}`);\n    }\n\n    return (\n        <div className=\"pm-add-task-container\">\n            <h2>Create New Task for Project #{projectId}</h2>\n\n            <div className=\"task-form-section\">\n                <label>Assign to Annotator:</label>\n                <select\n                    value={assignedTo}\n                    onChange={(e) => setAssignedTo(e.target.value)}\n                >\n                    <option value=\"\">--Unassigned--</option>\n                    {annotators.map((a) => (\n                        <option key={a.id} value={a.id}>\n                            {/* Display email or name+email */}\n                            {a.email}\n                        </option>\n                    ))}\n                </select>\n\n                <label>Deadline:</label>\n                <input\n                    type=\"date\"\n                    value={deadline}\n                    onChange={(e) => setDeadline(e.target.value)}\n                />\n\n                <label>Instructions:</label>\n                <textarea\n                    value={instructions}\n                    onChange={(e) => setInstructions(e.target.value)}\n                />\n            </div>\n\n            <div className=\"task-files-section\">\n                <h4>Select Folders/Files for this Task</h4>\n                {treeData.length > 0 ? (\n                    <CollapsibleTreeWithCheckbox\n                        treeData={treeData}\n                        selectedPaths={selectedPaths}\n                        setSelectedPaths={setSelectedPaths}\n                    />\n                ) : (\n                    <p>No files found.</p>\n                )}\n            </div>\n\n            <div className=\"task-buttons\">\n                <button onClick={handleCreateTask}>Create Task</button>\n                <button onClick={handleCancel}>Cancel</button>\n            </div>\n        </div>\n    );\n}\n\n/** Collapsible tree with checkboxes */\nfunction CollapsibleTreeWithCheckbox({ treeData, selectedPaths, setSelectedPaths }) {\n    return (\n        <ul className=\"file-tree\">\n            {treeData.map((node, idx) => (\n                <TreeCheckboxNode\n                    key={idx}\n                    node={node}\n                    selectedPaths={selectedPaths}\n                    setSelectedPaths={setSelectedPaths}\n                />\n            ))}\n        </ul>\n    );\n}\n\nfunction TreeCheckboxNode({ node, selectedPaths, setSelectedPaths }) {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const isChecked = selectedPaths.has(node.path);\n\n    const toggleOpen = () => setIsOpen(!isOpen);\n\n    const onCheckboxChange = (checked) => {\n        const newSet = new Set(selectedPaths);\n        if (checked) {\n            newSet.add(node.path);\n        } else {\n            newSet.delete(node.path);\n        }\n        setSelectedPaths(newSet);\n    };\n\n    if (node.type === 'directory') {\n        return (\n            <li className=\"tree-item\">\n                <div className=\"folder-header\">\n                    <span\n                        className=\"folder-arrow\"\n                        onClick={toggleOpen}\n                        role=\"button\"\n                        tabIndex={0}\n                        onKeyDown={(e) => e.key === 'Enter' && toggleOpen()}\n                    >\n                        {isOpen ? '⌄' : '>'}\n                    </span>\n                    <input\n                        type=\"checkbox\"\n                        checked={isChecked}\n                        onChange={(e) => {\n                            e.stopPropagation();\n                            onCheckboxChange(e.target.checked);\n                        }}\n                    />\n                    <span className=\"folder-icon\">📁</span> {node.name}\n                </div>\n                {isOpen && node.children && (\n                    <ul className=\"folder-children\">\n                        {node.children.map((child, i) => (\n                            <TreeCheckboxNode\n                                key={i}\n                                node={child}\n                                selectedPaths={selectedPaths}\n                                setSelectedPaths={setSelectedPaths}\n                            />\n                        ))}\n                    </ul>\n                )}\n            </li>\n        );\n    }\n\n    // It's a file\n    return (\n        <li className=\"tree-item\">\n            <div className=\"file-row\">\n                <input\n                    type=\"checkbox\"\n                    checked={isChecked}\n                    onChange={(e) => onCheckboxChange(e.target.checked)}\n                />\n                <span className=\"file-icon\">📄</span> {node.name}\n            </div>\n        </li>\n    );\n}\n\nexport default ProjectManagerAddTaskPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}