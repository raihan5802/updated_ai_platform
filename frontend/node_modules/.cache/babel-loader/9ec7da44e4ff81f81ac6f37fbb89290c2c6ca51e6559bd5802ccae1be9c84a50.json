{"ast":null,"code":"var _jsxFileName = \"/Users/raihanchowdhury/Desktop/ai_platform/P2/frontend/src/pages/ProjectManagerAddTaskPage.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// frontend/src/pages/ProjectManagerAddTaskPage.js\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport API from '../services/api';\nimport '../styles/ProjectManagerTask.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ProjectManagerAddTaskPage() {\n  _s();\n  const {\n    projectId\n  } = useParams();\n  const navigate = useNavigate();\n\n  // Basic Task form\n  const [assignedTo, setAssignedTo] = useState('');\n  const [deadline, setDeadline] = useState('');\n  const [instructions, setInstructions] = useState('');\n\n  // Annotators (if you want to assign a user with role \"Annotator\")\n  const [annotators, setAnnotators] = useState([]);\n\n  // The collapsible tree data\n  const [treeData, setTreeData] = useState([]);\n  // A Set of relative paths that the PM selects\n  const [selectedPaths, setSelectedPaths] = useState(new Set());\n  useEffect(() => {\n    fetchAnnotators();\n    fetchProjectTree();\n  }, [projectId]);\n  async function fetchAnnotators() {\n    try {\n      // If you have a route for returning all annotators...\n      const res = await API.get('/auth/users?role=Annotator');\n      // or fetch all users and filter by role_id\n      setAnnotators(res.data.users || []);\n    } catch (err) {\n      console.error('[AddTaskPage] fetchAnnotators error:', err);\n    }\n  }\n  async function fetchProjectTree() {\n    try {\n      // GET /api/auth/projects/:projectId/files-tree\n      const res = await API.get(`/auth/projects/${projectId}/files-tree`);\n      setTreeData(res.data.tree || []);\n    } catch (err) {\n      console.error('[AddTaskPage] fetchProjectTree error:', err);\n    }\n  }\n  async function handleCreateTask() {\n    try {\n      // 1) Create the new task\n      const body = {\n        assigned_to: assignedTo || null,\n        deadline: deadline || null,\n        instructions\n      };\n      const res = await API.post(`/auth/projects/${projectId}/tasks`, body);\n      const newTaskId = res.data.taskId;\n\n      // 2) If we have selectedPaths, copy them\n      if (selectedPaths.size > 0) {\n        await API.post(`/auth/projects/${projectId}/tasks/${newTaskId}/files`, {\n          selectedPaths: Array.from(selectedPaths)\n        });\n      }\n\n      // 3) Navigate back to project details\n      navigate(`/pm/projects/${projectId}`);\n    } catch (err) {\n      console.error('[AddTaskPage] handleCreateTask error:', err);\n      alert('Failed to create task. Check console for details.');\n    }\n  }\n\n  // If the user cancels, go back\n  function handleCancel() {\n    navigate(`/pm/projects/${projectId}`);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pm-add-task-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Create New Task for Project #\", projectId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-form-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Assign to Annotator:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: assignedTo,\n        onChange: e => setAssignedTo(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Unassigned--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), annotators.map(a => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: a.id,\n          children: a.name\n        }, a.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Deadline:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: deadline,\n        onChange: e => setDeadline(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Instructions:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: instructions,\n        onChange: e => setInstructions(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-files-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Select Folders/Files for this Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), treeData.length > 0 ? /*#__PURE__*/_jsxDEV(CollapsibleTreeWithCheckbox, {\n        treeData: treeData,\n        selectedPaths: selectedPaths,\n        setSelectedPaths: setSelectedPaths\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No files found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCreateTask,\n        children: \"Create Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n\n/** Collapsible tree of checkboxes **/\n// We define a wrapper component that iterates top-level data\n_s(ProjectManagerAddTaskPage, \"3ynkv53lzEjPMWpDjP5pkQYHHs4=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ProjectManagerAddTaskPage;\nfunction CollapsibleTreeWithCheckbox({\n  treeData,\n  selectedPaths,\n  setSelectedPaths\n}) {\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"file-tree\",\n    children: treeData.map((node, idx) => /*#__PURE__*/_jsxDEV(TreeCheckboxNode, {\n      node: node,\n      selectedPaths: selectedPaths,\n      setSelectedPaths: setSelectedPaths\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 9\n  }, this);\n}\n\n// Recursive Node component\n_c2 = CollapsibleTreeWithCheckbox;\nfunction TreeCheckboxNode({\n  node,\n  selectedPaths,\n  setSelectedPaths\n}) {\n  _s2();\n  const [isOpen, setIsOpen] = useState(false);\n  const isChecked = selectedPaths.has(node.path);\n\n  // toggle folder expansion\n  const toggleOpen = () => setIsOpen(!isOpen);\n\n  // handle checkbox\n  const onCheckboxChange = checked => {\n    const newSet = new Set(selectedPaths);\n    if (checked) {\n      newSet.add(node.path);\n    } else {\n      newSet.delete(node.path);\n    }\n    setSelectedPaths(newSet);\n  };\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"tree-item\",\n    children: node.type === 'directory' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"folder-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"folder-arrow\",\n          onClick: toggleOpen,\n          role: \"button\",\n          tabIndex: 0,\n          onKeyDown: e => e.key === 'Enter' && toggleOpen(),\n          children: isOpen ? '⌄' : '>'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: isChecked,\n          onChange: e => onCheckboxChange(e.target.checked),\n          onClick: e => e.stopPropagation()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"folder-icon\",\n          children: \"\\uD83D\\uDCC1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 25\n        }, this), \" \", node.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 21\n      }, this), isOpen && node.children && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"folder-children\",\n        children: node.children.map((child, i) => /*#__PURE__*/_jsxDEV(TreeCheckboxNode, {\n          node: child,\n          selectedPaths: selectedPaths,\n          setSelectedPaths: setSelectedPaths\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 33\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true) :\n    /*#__PURE__*/\n    // It's a file\n    _jsxDEV(\"div\", {\n      className: \"file-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: isChecked,\n        onChange: e => onCheckboxChange(e.target.checked)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"file-icon\",\n        children: \"\\uD83D\\uDCC4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 21\n      }, this), \" \", node.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 9\n  }, this);\n}\n_s2(TreeCheckboxNode, \"+sus0Lb0ewKHdwiUhiTAJFoFyQ0=\");\n_c3 = TreeCheckboxNode;\nexport default ProjectManagerAddTaskPage;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ProjectManagerAddTaskPage\");\n$RefreshReg$(_c2, \"CollapsibleTreeWithCheckbox\");\n$RefreshReg$(_c3, \"TreeCheckboxNode\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","API","jsxDEV","_jsxDEV","Fragment","_Fragment","ProjectManagerAddTaskPage","_s","projectId","navigate","assignedTo","setAssignedTo","deadline","setDeadline","instructions","setInstructions","annotators","setAnnotators","treeData","setTreeData","selectedPaths","setSelectedPaths","Set","fetchAnnotators","fetchProjectTree","res","get","data","users","err","console","error","tree","handleCreateTask","body","assigned_to","post","newTaskId","taskId","size","Array","from","alert","handleCancel","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","map","a","id","name","type","length","CollapsibleTreeWithCheckbox","onClick","_c","node","idx","TreeCheckboxNode","_c2","_s2","isOpen","setIsOpen","isChecked","has","path","toggleOpen","onCheckboxChange","checked","newSet","add","delete","role","tabIndex","onKeyDown","key","stopPropagation","child","i","_c3","$RefreshReg$"],"sources":["/Users/raihanchowdhury/Desktop/ai_platform/P2/frontend/src/pages/ProjectManagerAddTaskPage.js"],"sourcesContent":["// frontend/src/pages/ProjectManagerAddTaskPage.js\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport API from '../services/api';\nimport '../styles/ProjectManagerTask.css';\n\nfunction ProjectManagerAddTaskPage() {\n    const { projectId } = useParams();\n    const navigate = useNavigate();\n\n    // Basic Task form\n    const [assignedTo, setAssignedTo] = useState('');\n    const [deadline, setDeadline] = useState('');\n    const [instructions, setInstructions] = useState('');\n\n    // Annotators (if you want to assign a user with role \"Annotator\")\n    const [annotators, setAnnotators] = useState([]);\n\n    // The collapsible tree data\n    const [treeData, setTreeData] = useState([]);\n    // A Set of relative paths that the PM selects\n    const [selectedPaths, setSelectedPaths] = useState(new Set());\n\n    useEffect(() => {\n        fetchAnnotators();\n        fetchProjectTree();\n    }, [projectId]);\n\n    async function fetchAnnotators() {\n        try {\n            // If you have a route for returning all annotators...\n            const res = await API.get('/auth/users?role=Annotator');\n            // or fetch all users and filter by role_id\n            setAnnotators(res.data.users || []);\n        } catch (err) {\n            console.error('[AddTaskPage] fetchAnnotators error:', err);\n        }\n    }\n\n    async function fetchProjectTree() {\n        try {\n            // GET /api/auth/projects/:projectId/files-tree\n            const res = await API.get(`/auth/projects/${projectId}/files-tree`);\n            setTreeData(res.data.tree || []);\n        } catch (err) {\n            console.error('[AddTaskPage] fetchProjectTree error:', err);\n        }\n    }\n\n    async function handleCreateTask() {\n        try {\n            // 1) Create the new task\n            const body = {\n                assigned_to: assignedTo || null,\n                deadline: deadline || null,\n                instructions\n            };\n            const res = await API.post(`/auth/projects/${projectId}/tasks`, body);\n            const newTaskId = res.data.taskId;\n\n            // 2) If we have selectedPaths, copy them\n            if (selectedPaths.size > 0) {\n                await API.post(`/auth/projects/${projectId}/tasks/${newTaskId}/files`, {\n                    selectedPaths: Array.from(selectedPaths)\n                });\n            }\n\n            // 3) Navigate back to project details\n            navigate(`/pm/projects/${projectId}`);\n        } catch (err) {\n            console.error('[AddTaskPage] handleCreateTask error:', err);\n            alert('Failed to create task. Check console for details.');\n        }\n    }\n\n    // If the user cancels, go back\n    function handleCancel() {\n        navigate(`/pm/projects/${projectId}`);\n    }\n\n    return (\n        <div className=\"pm-add-task-container\">\n            <h2>Create New Task for Project #{projectId}</h2>\n\n            <div className=\"task-form-section\">\n                <label>Assign to Annotator:</label>\n                <select\n                    value={assignedTo}\n                    onChange={(e) => setAssignedTo(e.target.value)}\n                >\n                    <option value=\"\">--Unassigned--</option>\n                    {annotators.map((a) => (\n                        <option key={a.id} value={a.id}>{a.name}</option>\n                    ))}\n                </select>\n\n                <label>Deadline:</label>\n                <input\n                    type=\"date\"\n                    value={deadline}\n                    onChange={(e) => setDeadline(e.target.value)}\n                />\n\n                <label>Instructions:</label>\n                <textarea\n                    value={instructions}\n                    onChange={(e) => setInstructions(e.target.value)}\n                />\n            </div>\n\n            <div className=\"task-files-section\">\n                <h4>Select Folders/Files for this Task</h4>\n                {treeData.length > 0 ? (\n                    <CollapsibleTreeWithCheckbox\n                        treeData={treeData}\n                        selectedPaths={selectedPaths}\n                        setSelectedPaths={setSelectedPaths}\n                    />\n                ) : (\n                    <p>No files found.</p>\n                )}\n            </div>\n\n            <div className=\"task-buttons\">\n                <button onClick={handleCreateTask}>Create Task</button>\n                <button onClick={handleCancel}>Cancel</button>\n            </div>\n        </div>\n    );\n}\n\n/** Collapsible tree of checkboxes **/\n// We define a wrapper component that iterates top-level data\nfunction CollapsibleTreeWithCheckbox({ treeData, selectedPaths, setSelectedPaths }) {\n    return (\n        <ul className=\"file-tree\">\n            {treeData.map((node, idx) => (\n                <TreeCheckboxNode\n                    key={idx}\n                    node={node}\n                    selectedPaths={selectedPaths}\n                    setSelectedPaths={setSelectedPaths}\n                />\n            ))}\n        </ul>\n    );\n}\n\n// Recursive Node component\nfunction TreeCheckboxNode({ node, selectedPaths, setSelectedPaths }) {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const isChecked = selectedPaths.has(node.path);\n\n    // toggle folder expansion\n    const toggleOpen = () => setIsOpen(!isOpen);\n\n    // handle checkbox\n    const onCheckboxChange = (checked) => {\n        const newSet = new Set(selectedPaths);\n        if (checked) {\n            newSet.add(node.path);\n        } else {\n            newSet.delete(node.path);\n        }\n        setSelectedPaths(newSet);\n    };\n\n    return (\n        <li className=\"tree-item\">\n            {node.type === 'directory' ? (\n                <>\n                    <div className=\"folder-header\">\n                        <span\n                            className=\"folder-arrow\"\n                            onClick={toggleOpen}\n                            role=\"button\"\n                            tabIndex={0}\n                            onKeyDown={(e) => e.key === 'Enter' && toggleOpen()}\n                        >\n                            {isOpen ? '⌄' : '>'}\n                        </span>\n                        <input\n                            type=\"checkbox\"\n                            checked={isChecked}\n                            onChange={(e) => onCheckboxChange(e.target.checked)}\n                            onClick={(e) => e.stopPropagation()}\n                        />\n                        <span className=\"folder-icon\">📁</span> {node.name}\n                    </div>\n                    {isOpen && node.children && (\n                        <ul className=\"folder-children\">\n                            {node.children.map((child, i) => (\n                                <TreeCheckboxNode\n                                    key={i}\n                                    node={child}\n                                    selectedPaths={selectedPaths}\n                                    setSelectedPaths={setSelectedPaths}\n                                />\n                            ))}\n                        </ul>\n                    )}\n                </>\n            ) : (\n                // It's a file\n                <div className=\"file-row\">\n                    <input\n                        type=\"checkbox\"\n                        checked={isChecked}\n                        onChange={(e) => onCheckboxChange(e.target.checked)}\n                    />\n                    <span className=\"file-icon\">📄</span> {node.name}\n                </div>\n            )}\n        </li>\n    );\n}\n\nexport default ProjectManagerAddTaskPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}