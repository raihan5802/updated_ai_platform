{"ast":null,"code":"var _jsxFileName = \"/Users/raihanchowdhury/Desktop/ai_platform/P2/frontend/src/pages/ProjectManagerAddTaskPage.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// frontend/src/pages/ProjectManagerAddTaskPage.js\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport API from '../services/api';\nimport FileTree from '../components/FileTree';\nimport '../styles/ProjectManagerTask.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ProjectManagerAddTaskPage() {\n  _s();\n  const {\n    projectId\n  } = useParams();\n  const navigate = useNavigate();\n\n  // Basic Task form state\n  const [annotators, setAnnotators] = useState([]); // to populate dropdown\n  const [assignedTo, setAssignedTo] = useState('');\n  const [deadline, setDeadline] = useState('');\n  const [instructions, setInstructions] = useState('');\n\n  // For file selection\n  const [projectTree, setProjectTree] = useState([]);\n  const [selectedPaths, setSelectedPaths] = useState(new Set());\n  // storing relative paths\n\n  // On mount, fetch possible annotators and fetch folder tree\n  useEffect(() => {\n    fetchAnnotators();\n    fetchProjectFileTree();\n  }, []);\n  async function fetchAnnotators() {\n    try {\n      // Suppose you have an endpoint /auth/users?role=Annotator\n      // or you can fetch all users and filter. Adjust as needed.\n      const res = await API.get('/auth/users?role=Annotator');\n      setAnnotators(res.data.users || []);\n    } catch (err) {\n      console.error('[AddTask] fetchAnnotators error:', err);\n    }\n  }\n  async function fetchProjectFileTree() {\n    try {\n      // Reuse the existing code for reading the entire folder under projectId\n      // or just your `/requests/:requestId/files-tree` if that's how you do it\n      const res = await API.get(`/auth/projects/${projectId}/files-tree`);\n      setProjectTree(res.data.tree || []);\n    } catch (err) {\n      console.error('[AddTask] fetchProjectFileTree error:', err);\n    }\n  }\n\n  // 1) Create the new task in DB\n  async function handleCreateTask() {\n    try {\n      // Create the new task\n      const body = {\n        assigned_to: assignedTo || null,\n        deadline: deadline || null,\n        instructions\n      };\n      const res = await API.post(`/auth/projects/${projectId}/tasks`, body);\n      const newTaskId = res.data.taskId;\n\n      // 2) If we selected files/folders, copy them into the task folder\n      if (selectedPaths.size > 0) {\n        await API.post(`/auth/projects/${projectId}/tasks/${newTaskId}/files`, {\n          selectedPaths: Array.from(selectedPaths)\n        });\n      }\n\n      // Return to Project Details\n      navigate(`/pm/projects/${projectId}`);\n    } catch (err) {\n      console.error('[AddTask] handleCreateTask error:', err);\n      alert('Failed to create task.');\n    }\n  }\n\n  // Collapsible tree with checkboxes\n  // We'll create a custom component below to handle color-coding or checkboxes\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pm-add-task-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Create New Task for Project #\", projectId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-form-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Assign to Annotator:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: assignedTo,\n        onChange: e => setAssignedTo(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Unassigned--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), annotators.map(a => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: a.id,\n          children: a.name\n        }, a.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Deadline:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: deadline,\n        onChange: e => setDeadline(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Instructions:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: instructions,\n        onChange: e => setInstructions(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-files-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Select Folders/Files for this Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CollapsibleTreeWithCheckbox, {\n        treeData: projectTree,\n        selectedPaths: selectedPaths,\n        setSelectedPaths: setSelectedPaths\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreateTask,\n      children: \"Create Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(`/pm/projects/${projectId}`),\n      children: \"Cancel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}\n\n/**\n * Example of a collapsible tree with checkboxes:\n */\n_s(ProjectManagerAddTaskPage, \"/9TO1puLQ1hTMFzZbzT7jQ4xDog=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ProjectManagerAddTaskPage;\nfunction CollapsibleTreeWithCheckbox({\n  treeData,\n  selectedPaths,\n  setSelectedPaths\n}) {\n  if (!treeData || treeData.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No files found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"file-tree\",\n    children: treeData.map((node, idx) => /*#__PURE__*/_jsxDEV(TreeCheckboxNode, {\n      node: node,\n      selectedPaths: selectedPaths,\n      setSelectedPaths: setSelectedPaths\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 9\n  }, this);\n}\n_c2 = CollapsibleTreeWithCheckbox;\nfunction TreeCheckboxNode({\n  node,\n  selectedPaths,\n  setSelectedPaths\n}) {\n  _s2();\n  const [isOpen, setIsOpen] = useState(false);\n  const isChecked = selectedPaths.has(node.path);\n  const toggleCheckbox = () => {\n    // If checked, remove from set. Otherwise, add to set\n    const newSet = new Set(selectedPaths);\n    if (newSet.has(node.path)) {\n      newSet.delete(node.path);\n    } else {\n      newSet.add(node.path);\n    }\n    setSelectedPaths(newSet);\n  };\n\n  // Helper to recursively select/deselect children if you want that behavior\n  const selectAllChildren = (childNode, selected) => {\n    // If folder, select all children\n    if (childNode.children) {\n      childNode.children.forEach(c => {\n        selectAllChildren(c, selected);\n      });\n    }\n    if (selected) {\n      selectedPaths.add(childNode.path);\n    } else {\n      selectedPaths.delete(childNode.path);\n    }\n  };\n\n  // This is purely a basic example. You can expand it to auto-select children, color code, etc.\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: node.type === 'directory' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        role: \"button\",\n        tabIndex: 0,\n        className: \"folder-toggle\",\n        onClick: () => setIsOpen(!isOpen),\n        onKeyDown: e => e.key === 'Enter' && setIsOpen(!isOpen),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"folder-arrow\",\n          children: isOpen ? '⌄' : '>'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: isChecked,\n          onChange: e => {\n            toggleCheckbox();\n            // optionally, if you want to select all children automatically:\n            selectAllChildren(node, e.target.checked);\n            setSelectedPaths(new Set(selectedPaths));\n          },\n          onClick: e => e.stopPropagation() // so we don't also toggle open on checkbox\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"folder-icon\",\n          children: \"\\uD83D\\uDCC1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 25\n        }, this), \" \", node.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }, this), isOpen && node.children && /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: node.children.map((child, i) => /*#__PURE__*/_jsxDEV(TreeCheckboxNode, {\n          node: child,\n          selectedPaths: selectedPaths,\n          setSelectedPaths: setSelectedPaths\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 33\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true) :\n    /*#__PURE__*/\n    // It's a file\n    _jsxDEV(\"div\", {\n      className: \"file-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: isChecked,\n        onChange: e => {\n          toggleCheckbox();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"file-icon\",\n        children: \"\\uD83D\\uDCC4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 21\n      }, this), \" \", node.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 9\n  }, this);\n}\n_s2(TreeCheckboxNode, \"+sus0Lb0ewKHdwiUhiTAJFoFyQ0=\");\n_c3 = TreeCheckboxNode;\nexport default ProjectManagerAddTaskPage;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ProjectManagerAddTaskPage\");\n$RefreshReg$(_c2, \"CollapsibleTreeWithCheckbox\");\n$RefreshReg$(_c3, \"TreeCheckboxNode\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","API","FileTree","jsxDEV","_jsxDEV","Fragment","_Fragment","ProjectManagerAddTaskPage","_s","projectId","navigate","annotators","setAnnotators","assignedTo","setAssignedTo","deadline","setDeadline","instructions","setInstructions","projectTree","setProjectTree","selectedPaths","setSelectedPaths","Set","fetchAnnotators","fetchProjectFileTree","res","get","data","users","err","console","error","tree","handleCreateTask","body","assigned_to","post","newTaskId","taskId","size","Array","from","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","map","a","id","name","type","CollapsibleTreeWithCheckbox","treeData","onClick","_c","length","node","idx","TreeCheckboxNode","_c2","_s2","isOpen","setIsOpen","isChecked","has","path","toggleCheckbox","newSet","delete","add","selectAllChildren","childNode","selected","forEach","c","role","tabIndex","onKeyDown","key","checked","stopPropagation","child","i","_c3","$RefreshReg$"],"sources":["/Users/raihanchowdhury/Desktop/ai_platform/P2/frontend/src/pages/ProjectManagerAddTaskPage.js"],"sourcesContent":["// frontend/src/pages/ProjectManagerAddTaskPage.js\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport API from '../services/api';\nimport FileTree from '../components/FileTree';\nimport '../styles/ProjectManagerTask.css';\n\nfunction ProjectManagerAddTaskPage() {\n    const { projectId } = useParams();\n    const navigate = useNavigate();\n\n    // Basic Task form state\n    const [annotators, setAnnotators] = useState([]); // to populate dropdown\n    const [assignedTo, setAssignedTo] = useState('');\n    const [deadline, setDeadline] = useState('');\n    const [instructions, setInstructions] = useState('');\n\n    // For file selection\n    const [projectTree, setProjectTree] = useState([]);\n    const [selectedPaths, setSelectedPaths] = useState(new Set());\n    // storing relative paths\n\n    // On mount, fetch possible annotators and fetch folder tree\n    useEffect(() => {\n        fetchAnnotators();\n        fetchProjectFileTree();\n    }, []);\n\n    async function fetchAnnotators() {\n        try {\n            // Suppose you have an endpoint /auth/users?role=Annotator\n            // or you can fetch all users and filter. Adjust as needed.\n            const res = await API.get('/auth/users?role=Annotator');\n            setAnnotators(res.data.users || []);\n        } catch (err) {\n            console.error('[AddTask] fetchAnnotators error:', err);\n        }\n    }\n\n    async function fetchProjectFileTree() {\n        try {\n            // Reuse the existing code for reading the entire folder under projectId\n            // or just your `/requests/:requestId/files-tree` if that's how you do it\n            const res = await API.get(`/auth/projects/${projectId}/files-tree`);\n            setProjectTree(res.data.tree || []);\n        } catch (err) {\n            console.error('[AddTask] fetchProjectFileTree error:', err);\n        }\n    }\n\n    // 1) Create the new task in DB\n    async function handleCreateTask() {\n        try {\n            // Create the new task\n            const body = {\n                assigned_to: assignedTo || null,\n                deadline: deadline || null,\n                instructions\n            };\n            const res = await API.post(`/auth/projects/${projectId}/tasks`, body);\n            const newTaskId = res.data.taskId;\n\n            // 2) If we selected files/folders, copy them into the task folder\n            if (selectedPaths.size > 0) {\n                await API.post(`/auth/projects/${projectId}/tasks/${newTaskId}/files`, {\n                    selectedPaths: Array.from(selectedPaths)\n                });\n            }\n\n            // Return to Project Details\n            navigate(`/pm/projects/${projectId}`);\n        } catch (err) {\n            console.error('[AddTask] handleCreateTask error:', err);\n            alert('Failed to create task.');\n        }\n    }\n\n    // Collapsible tree with checkboxes\n    // We'll create a custom component below to handle color-coding or checkboxes\n    return (\n        <div className=\"pm-add-task-container\">\n            <h2>Create New Task for Project #{projectId}</h2>\n\n            <div className=\"task-form-section\">\n                <label>Assign to Annotator:</label>\n                <select\n                    value={assignedTo}\n                    onChange={(e) => setAssignedTo(e.target.value)}\n                >\n                    <option value=\"\">--Unassigned--</option>\n                    {annotators.map((a) => (\n                        <option key={a.id} value={a.id}>{a.name}</option>\n                    ))}\n                </select>\n\n                <label>Deadline:</label>\n                <input\n                    type=\"date\"\n                    value={deadline}\n                    onChange={(e) => setDeadline(e.target.value)}\n                />\n\n                <label>Instructions:</label>\n                <textarea\n                    value={instructions}\n                    onChange={(e) => setInstructions(e.target.value)}\n                />\n            </div>\n\n            <div className=\"task-files-section\">\n                <h4>Select Folders/Files for this Task</h4>\n                <CollapsibleTreeWithCheckbox\n                    treeData={projectTree}\n                    selectedPaths={selectedPaths}\n                    setSelectedPaths={setSelectedPaths}\n                />\n            </div>\n\n            <button onClick={handleCreateTask}>Create Task</button>\n            <button onClick={() => navigate(`/pm/projects/${projectId}`)}>Cancel</button>\n        </div>\n    );\n}\n\n\n/**\n * Example of a collapsible tree with checkboxes:\n */\nfunction CollapsibleTreeWithCheckbox({ treeData, selectedPaths, setSelectedPaths }) {\n    if (!treeData || treeData.length === 0) {\n        return <p>No files found.</p>;\n    }\n\n    return (\n        <ul className=\"file-tree\">\n            {treeData.map((node, idx) => (\n                <TreeCheckboxNode\n                    key={idx}\n                    node={node}\n                    selectedPaths={selectedPaths}\n                    setSelectedPaths={setSelectedPaths}\n                />\n            ))}\n        </ul>\n    );\n}\n\nfunction TreeCheckboxNode({ node, selectedPaths, setSelectedPaths }) {\n    const [isOpen, setIsOpen] = useState(false);\n\n    const isChecked = selectedPaths.has(node.path);\n\n    const toggleCheckbox = () => {\n        // If checked, remove from set. Otherwise, add to set\n        const newSet = new Set(selectedPaths);\n        if (newSet.has(node.path)) {\n            newSet.delete(node.path);\n        } else {\n            newSet.add(node.path);\n        }\n        setSelectedPaths(newSet);\n    };\n\n    // Helper to recursively select/deselect children if you want that behavior\n    const selectAllChildren = (childNode, selected) => {\n        // If folder, select all children\n        if (childNode.children) {\n            childNode.children.forEach((c) => {\n                selectAllChildren(c, selected);\n            });\n        }\n        if (selected) {\n            selectedPaths.add(childNode.path);\n        } else {\n            selectedPaths.delete(childNode.path);\n        }\n    };\n\n    // This is purely a basic example. You can expand it to auto-select children, color code, etc.\n    return (\n        <li>\n            {node.type === 'directory' ? (\n                <>\n                    <div\n                        role=\"button\"\n                        tabIndex={0}\n                        className=\"folder-toggle\"\n                        onClick={() => setIsOpen(!isOpen)}\n                        onKeyDown={(e) => e.key === 'Enter' && setIsOpen(!isOpen)}\n                    >\n                        <span className=\"folder-arrow\">{isOpen ? '⌄' : '>'}</span>\n                        <input\n                            type=\"checkbox\"\n                            checked={isChecked}\n                            onChange={(e) => {\n                                toggleCheckbox();\n                                // optionally, if you want to select all children automatically:\n                                selectAllChildren(node, e.target.checked);\n                                setSelectedPaths(new Set(selectedPaths));\n                            }}\n                            onClick={(e) => e.stopPropagation()} // so we don't also toggle open on checkbox\n                        />\n                        <span className=\"folder-icon\">📁</span> {node.name}\n                    </div>\n                    {isOpen && node.children && (\n                        <ul>\n                            {node.children.map((child, i) => (\n                                <TreeCheckboxNode\n                                    key={i}\n                                    node={child}\n                                    selectedPaths={selectedPaths}\n                                    setSelectedPaths={setSelectedPaths}\n                                />\n                            ))}\n                        </ul>\n                    )}\n                </>\n            ) : (\n                // It's a file\n                <div className=\"file-item\">\n                    <input\n                        type=\"checkbox\"\n                        checked={isChecked}\n                        onChange={(e) => {\n                            toggleCheckbox();\n                        }}\n                    />\n                    <span className=\"file-icon\">📄</span> {node.name}\n                </div>\n            )}\n        </li>\n    );\n}\n\nexport default ProjectManagerAddTaskPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}